<!-- product section -->
<script>
    document.addEventListener("DOMContentLoaded", function () {

        // Fonction pour charger les produits
        const loadProducts = async () => {
            try {
                console.log("Début du chargement des produits");
                const response = await fetch('http://localhost:3000/api/products');
                const products = await response.json();

                console.log("Produits reçus de l'API:", products);

                const productsContainer = document.querySelector('.products-row');
                const recentSalesTableBody = document.querySelector('.recent-sales tbody');

                if (!products || products.length === 0) {
                    productsContainer.innerHTML = '<div class="col-12 text-center">Aucun produit disponible</div>';
                    return;
                }

                productsContainer.innerHTML = '';
                recentSalesTableBody.innerHTML = '';

                products.forEach(product => {
                    console.log("Traitement du produit:", product);
                    const recentSaleRow = createRecentSaleRow(product);
                    recentSalesTableBody.insertAdjacentHTML('beforeend', recentSaleRow);
                });

                console.log("Initialisation des boutons");
                initializeCartButtons();
            } catch (error) {
                console.error('Erreur détaillée lors du chargement des produits:', error);
                const productsContainer = document.querySelector('.products-row');
                productsContainer.innerHTML = `
            <div class="col-12 text-center text-danger">
                Une erreur est survenue lors du chargement des produits.
                <br>
                Détails: ${error.message}
            </div>`;
            }
        };
        // Fonction pour créer une ligne HTML pour "Recent Sales"
        const createRecentSaleRow = (product) => {
            const imagePath = product.image
                ? `/images/product/${product.image}`
                : '/assets/img/products/product-img-1.jpg';

            // Ajouter un log pour déboguer
            console.log('Creating row with category_id:', product.category_id);

            return `
        <tr class="product-row" 
            data-product-id="${product.product_id}"
            data-product-name="${product.name}"
            data-product-price="${product.price}"
            data-product-stock="${product.stock_quantity}"
            data-product-description="${product.description || ''}"
            data-product-category="${product.category_id || ''}"
            data-product-unity="${product.unit_of_mesurement || ''}"
            data-product-image="${imagePath}">
            <td><input class="form-check-input" type="checkbox"></td>
            <td><img class="flex-shrink-0" src="${imagePath}" alt="${product.name}" style="width: 40px; height: 40px;"></td>
            <td>${product.name}</td>
            <td>${product.price}Ar</td>
            <td>${product.stock_quantity}</td>
        </tr>
    `;
        };
        // Fonction pour initialiser les événements des boutons du panier
        const initializeCartButtons = () => {
            const cartBtns = document.querySelectorAll('.cart-btn');
            console.log("Nombre de boutons trouvés:", cartBtns.length);

            cartBtns.forEach(cartBtn => {
                const quantity = cartBtn.previousElementSibling;
                const cartText = cartBtn.querySelector('.cart-text');

                cartBtn.addEventListener('mouseover', function () {
                    cartText.textContent = 'Add to Cart';
                    quantity.style.display = 'none';
                });

                cartBtn.addEventListener('mouseout', function () {
                    cartText.textContent = '';
                    quantity.style.display = 'inline';
                });

                cartBtn.addEventListener('click', async function (e) {
                    e.preventDefault();
                    const productId = this.dataset.productId;
                    const quantityInput = document.querySelector(`.quantity[data-product-id="${productId}"]`);
                    const userIdInput = document.querySelector('.user_id');
                    const priceElement = this.closest('.single-product-item').querySelector('.product-price');
                    const price = parseFloat(priceElement.textContent.split('Ar')[0]);

                    const cartData = {
                        user_id: userIdInput.value,
                        items: [{
                            product_id: parseInt(productId),
                            quantity: parseInt(quantityInput.value),
                            price: price
                        }]
                    };

                    try {
                        const response = await fetch('http://localhost:3000/api/carts', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(cartData)
                        });

                        if (!response.ok) {
                            throw new Error('Erreur lors de l\'ajout au panier');
                        }

                        const result = await response.json();
                        window.location.reload();
                        alert('Produit ajouté au panier avec succès!');

                    } catch (error) {
                        console.error('Erreur:', error);
                        alert('Erreur lors de l\'ajout au panier');
                    }
                });
            });
        };

        // Fonction pour charger les catégories
        const loadCategories = async () => {
            try {
                const response = await fetch('http://localhost:3000/api/categories');
                const categories = await response.json();
                console.log('Loaded categories:', categories); // Ajoutez ce log

                const categorySelect = document.getElementById('category_id');
                categorySelect.innerHTML = '<option selected disabled>Sélectionnez une catégorie</option>';

                categories.forEach(category => {
                    console.log('Adding category:', category); // Debug log
                    const option = document.createElement('option');
                    option.value = category.category_id;
                    option.textContent = category.category_name;
                    categorySelect.appendChild(option);
                });
            } catch (error) {
                console.error('Erreur lors du chargement des catégories:', error);
            }
        };
        // Charger les produits au chargement de la page
        console.log("DOMContentLoaded - Démarrage du chargement");
        loadProducts();
        loadCategories();
        async function updateProduct(productId, formData) {
            try {
                const response = await fetch(`http://localhost:3000/api/products/${productId}`, {
                    method: 'PUT',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error('Erreur lors de la mise à jour du produit');
                }

                const result = await response.json();
                return result;
            } catch (error) {
                throw new Error(`Erreur lors de la mise à jour: ${error.message}`);
            }
        }
        const submitButton = document.querySelector('.secondChamp .btn-primary');
        submitButton.addEventListener('click', async function (e) {
            e.preventDefault();

            // Récupérer tous les champs du formulaire
            const imageInput = document.getElementById('image');
            const nameInput = document.getElementById('name');
            const priceInput = document.getElementById('price');
            const stockInput = document.querySelector('input[name="stock_quantity"]');
            const descriptionInput = document.getElementById('description');
            const categoryInput = document.getElementById('category_id');
            const unityInput = document.querySelector('input[name="unity"]:checked');

            // Validation basique
            if (!nameInput.value || !priceInput.value || !stockInput.value ||
                !descriptionInput.value || !categoryInput.value || !unityInput) {
                alert('Veuillez remplir tous les champs obligatoires');
                return;
            }

            // Créer un objet FormData pour envoyer les données
            const formData = new FormData();
            formData.append('name', nameInput.value);
            formData.append('price', priceInput.value);
            formData.append('stock_quantity', stockInput.value);
            formData.append('description', descriptionInput.value);
            formData.append('category_id', categoryInput.value);
            formData.append('unity', unityInput.value);

            // Ajouter l'image si elle existe
            if (imageInput.files.length > 0) {
                formData.append('image', imageInput.files[0]);
            }

            try {
                if (this.dataset.productId) {
                    // Mode mise à jour
                    const result = await updateProduct(this.dataset.productId, formData);
                    alert('Produit mis à jour avec succès!');
                } else {
                    // Mode création
                    formData.append('entity', nameInput.value);
                    formData.append('entityType', 'ProductType');

                    const response = await fetch('http://localhost:3000/api/products', {
                        method: 'POST',
                        body: formData
                    });

                    if (!response.ok) {
                        throw new Error('Erreur lors de l\'ajout du produit');
                    }

                    alert('Produit ajouté avec succès!');
                }

                // Réinitialiser le formulaire et l'interface
                resetForm();
                await loadProducts();

                // Réinitialiser le bouton
                this.textContent = 'Add';
                delete this.dataset.productId;

                // Fermer le formulaire
                const closeButton = document.getElementById('closeButton');
                closeButton.click();

            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de l\'opération: ' + error.message);
            }
        });




        const deleteButton = document.createElement('button');
        deleteButton.className = 'btn btn-danger ms-2';
        deleteButton.textContent = 'Delete';
        deleteButton.addEventListener('click', async function (e) {
            e.preventDefault();

            const productId = submitButton.dataset.productId;
            if (!productId) return;

            if (!confirm('Êtes-vous sûr de vouloir supprimer ce produit ?')) {
                return;
            }

            try {
                const response = await fetch(`http://localhost:3000/api/products/${productId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    throw new Error('Erreur lors de la suppression du produit');
                }

                alert('Produit supprimé avec succès!');

                // Réinitialiser l'interface
                resetForm();
                await loadProducts();

                // Fermer le formulaire
                const closeButton = document.getElementById('closeButton');
                closeButton.click();

            } catch (error) {
                console.error('Erreur:', error);
                alert('Erreur lors de la suppression: ' + error.message);
            }
        });
        // Fonction pour réinitialiser le formulaire
        function resetForm() {
            document.getElementById('image').value = '';
            document.getElementById('name').value = '';
            document.getElementById('price').value = '';
            document.querySelector('input[name="stock_quantity"]').value = '';
            document.getElementById('description').value = '';
            document.getElementById('category_id').value = 'Sélectionnez une catégorie';
            const checkedRadio = document.querySelector('input[name="unity"]:checked');
            if (checkedRadio) {
                checkedRadio.checked = false;
            }
        }
        // Fonction pour gérer le clic sur une ligne
        // Modifiez la fonction handleRowClick pour ajouter plus de logging
        const handleRowClick = (event) => {
            const row = event.target.closest('.product-row');
            if (!row) return;

            // Ajout de logs pour déboguer
            console.log('Raw row dataset:', row.dataset);

            const productData = {
                id: row.dataset.productId,
                name: row.dataset.productName,
                price: row.dataset.productPrice,
                stock_quantity: row.dataset.productStock,
                description: row.dataset.productDescription,
                category_id: row.dataset.productCategory,
                unit_of_mesurement: row.dataset.productUnity,
                image: row.dataset.productImage
            };

            console.log('Parsed product data:', productData);

            // Afficher le formulaire
            const productFormContainer = document.getElementById('productFormContainer');
            const salesContainer = document.getElementById('tableProduct');
            const addProductForm = document.getElementById('addProductForm');

            productFormContainer.classList.remove('d-none');
            salesContainer.classList.remove('col-lg-12');
            salesContainer.classList.add('col-lg-8');
            addProductForm.classList.add('d-none');

            // Pré-remplir les champs du formulaire
            document.getElementById('name').value = productData.name;
            document.getElementById('price').value = productData.price;
            document.querySelector('input[name="stock_quantity"]').value = productData.stock_quantity;
            document.getElementById('description').value = productData.description;

            // Gérer la sélection de la catégorie
            const categorySelect = document.getElementById('category_id');
            if (productData.category_id && productData.category_id !== 'undefined') {
                const categoryId = parseInt(productData.category_id);
                console.log('Attempting to set category_id:', categoryId);

                // Vérifier si la catégorie existe dans le select
                const options = Array.from(categorySelect.options);
                const option = options.find(opt => parseInt(opt.value) === categoryId);

                if (option) {
                    categorySelect.value = categoryId;
                    console.log('Category set successfully to:', categoryId);
                } else {
                    console.warn('Category not found in options. Available options:', options.map(opt => opt.value));
                    categorySelect.selectedIndex = 0; // Sélectionner l'option par défaut
                }
            } else {
                console.warn('Invalid category_id:', productData.category_id);
                categorySelect.selectedIndex = 0;
            }

            // Gérer la sélection de l'unité
            if (productData.unit_of_mesurement) {
                const unityRadio = document.querySelector(`input[name="unity"][value="${productData.unit_of_mesurement}"]`);
                if (unityRadio) {
                    unityRadio.checked = true;
                } else {
                    console.warn('Unity radio button not found for value:', productData.unit_of_mesurement);
                }
            }

            // Ajouter le bouton de suppression à côté du bouton Update
            const buttonContainer = submitButton.parentElement;
            buttonContainer.appendChild(deleteButton);
            // Modifier le bouton
            const addButton = document.querySelector('.secondChamp .btn-primary');
            addButton.textContent = 'Update';
            addButton.dataset.productId = productData.id;
        };
        document.querySelector('.recent-sales tbody').addEventListener('click', handleRowClick);
    });
</script>


<div class="product-section mt-150 mb-150">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 offset-lg-2 text-center">
                <div class="section-title">
                    <h3><span class="orange-text">Nos</span> Produits</h3>
                </div>
            </div>
        </div>

        <div class="row products-row">
            <!-- Les produits seront chargés ici dynamiquement -->
            <div class="col-12 text-center">
                Chargement des produits...
            </div>
        </div>
    </div>
</div>

<!-- Recent Sales Start -->
<div class="container-fluid pt-4 px-4">
    <div class="row">
        <div class="col-lg-12" id="tableProduct">
            <div class="bg-light text-center rounded p-4">
                <div class="d-flex align-items-center justify-content-between mb-4">
                    <h6 class="mb-0">Recent Sales</h6>
                    <div class="btn btn-primary" id="addProductForm">Add Product</div>
                    <a href="">Show All</a>
                </div>
                <div class="table-responsive recent-sales">
                    <table class="table text-start align-middle table-bordered table-hover mb-0">
                        <thead>
                            <tr class="text-dark">
                                <th scope="col"></th>
                                <th scope="col">Image</th>
                                <th scope="col">Name</th>
                                <th scope="col">Price</th>
                                <th scope="col">Stock Disponible</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Les lignes des ventes récentes seront insérées ici -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="col-lg-4 d-none" id="productFormContainer">
            <div class="bg-light rounded h-100 p-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h6 class="mb-0">Input Group</h6>
                    <button class="btn btn-danger" id="closeButton">Close</button>
                </div>
                <div class="firstChamp">
                    <label for="basic-url" class="form-label">Image</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">
                            <i class="fas fa-image"></i>
                        </span>
                        <input class="form-control" name="image" type="file" id="image">
                    </div>
                    <label for="basic-url" class="form-label">Name</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">@</span>
                        <input type="text" class="form-control" placeholder="name" aria-label="name" name="name"
                            id="name" aria-describedby="basic-addon1">
                    </div>
                    <label for="basic-url" class="form-label">Price</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">
                            <i class="fas fa-dollar-sign"></i>
                        </span>
                        <input type="number" class="form-control" name="price" id="price" placeholder="price"
                            aria-label="price" aria-describedby="basic-addon1">
                    </div>
                    <label for="basic-url" class="form-label">Qty Stock</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">
                            <i class="fas fa-boxes"></i>
                        </span>
                        <input type="number" class="form-control" name="stock_quantity" placeholder="stock_quantity"
                            aria-label="stock_quantity" aria-describedby="basic-addon1">
                    </div>
                    <div class="d-flex justify-content-end">
                        <button class="btn btn-success" id="nextButton">Suivant</button>
                    </div>
                </div>
                <div class="secondChamp">
                    <label for="basic-url" class="form-label">Description</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">
                            <i class="fas fa-align-left"></i>
                        </span>
                        <textarea class="form-control" name="description" id="description"
                            aria-label="With textarea"></textarea>
                    </div>
                    <label for="basic-url" class="form-label">Category</label>
                    <div class="input-group mb-3">
                        <span class="input-group-text">
                            <i class="fas fa-tags"></i>
                        </span>
                        <select class="form-select" name="category_id" id="category_id"
                            aria-label="multiple select example">
                            <option selected disabled>Sélectionnez une catégorie</option>
                        </select>
                    </div>
                    <label for="basic-url" class="form-label">Unity</label>
                    <div class="input-group mb-3">
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="unity" id="kg" value="kg">
                            <label class="form-check-label" for="kg">Kg</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="unity" id="l" value="l">
                            <label class="form-check-label" for="l">L</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <!-- Corriger la valeur qui était "l" -->
                            <input class="form-check-input" type="radio" name="unity" id="m" value="m">
                            <label class="form-check-label" for="m">m</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <!-- Corriger la valeur qui était "l" -->
                            <input class="form-check-input" type="radio" name="unity" id="cm" value="cm">
                            <label class="form-check-label" for="cm">cm</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <!-- Corriger la valeur qui était "l" -->
                            <input class="form-check-input" type="radio" name="unity" id="pcs" value="pcs">
                            <label class="form-check-label" for="pcs">pcs</label>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <button class="btn btn-success" id="previousButton">Previous</button>
                        <button class="btn btn-primary">Add</button>
                    </div>

                </div>
            </div>
        </div>
    </div>

</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const addProductForm = document.getElementById('addProductForm');
        const closeButton = document.getElementById('closeButton');
        const productFormContainer = document.getElementById('productFormContainer');
        const salesContainer = document.getElementById('tableProduct');
        const firstChamp = document.querySelector('.firstChamp');
        const secondChamp = document.querySelector('.secondChamp');
        const nextButton = document.getElementById('nextButton');
        const previousButton = document.getElementById('previousButton');

        // Masquer le secondChamp au démarrage
        secondChamp.style.display = 'none';

        // Afficher le secondChamp et masquer le firstChamp lorsque le bouton "suivant" est cliqué
        nextButton.addEventListener('click', function () {
            firstChamp.style.display = 'none';
            secondChamp.style.display = 'block';
        });

        previousButton.addEventListener('click', function () {
            firstChamp.style.display = 'block';
            secondChamp.style.display = 'none';
        });


        addProductForm.addEventListener('click', function () {
            // Toggle the visibility of the product form container
            if (productFormContainer.classList.contains('d-none')) {
                // Show the form and change class of sales container
                productFormContainer.classList.remove('d-none');
                salesContainer.classList.remove('col-lg-12');
                salesContainer.classList.add('col-lg-8');
                addProductForm.classList.add('d-none');
            }
        });

        closeButton.addEventListener('click', function () {
            // Hide the form and reset class of sales container
            productFormContainer.classList.add('d-none');
            salesContainer.classList.remove('col-lg-8');
            salesContainer.classList.add('col-lg-12');
            addProductForm.classList.remove('d-none');

            firstChamp.style.display = 'block';
            secondChamp.style.display = 'none';
        });
    });
</script>